{"/home/travis/build/npmtest/node-npmtest-errors/test.js":"/* istanbul instrument in package npmtest_errors */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-errors/lib.npmtest_errors.js":"/* istanbul instrument in package npmtest_errors */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_errors = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_errors = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-errors/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-errors && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_errors */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_errors\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_errors.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_errors.rollup.js'] =\n            local.assetsDict['/assets.npmtest_errors.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_errors.__dirname + '/lib.npmtest_errors.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-errors/node_modules/errors/index.js":"\nmodule.exports = require('./lib/errors.js');\n","/home/travis/build/npmtest/node-npmtest-errors/node_modules/errors/lib/errors.js":"\n/*!\n * Module dependencies.\n */\n\nvar util = require('util')\n    , http = require('http')\n    , fs = require('fs')\n    , env = process.env.NODE_ENV || 'development';\n\n/**\n * JavaScript Error constructors indexed by name\n * for convenience.\n *\n * Examples:\n *\n *  new errors.JS_ERRORS.URIError('Malformed URI');\n *\n */\n\nexports.JS_ERRORS = {\n    Error: Error\n    , EvalError: EvalError\n    , RangeError: RangeError\n    , ReferenceError: ReferenceError\n    , SyntaxError: SyntaxError\n    , TypeError: TypeError\n    , URIError: URIError\n};\n\n/*!\n * error constructors indexed by code\n */\n\nvar codes = {};\n\n/*!\n * error constructors indexed by name\n */\n\nvar names = {};\n\n/**\n * Cache the given error constructor indexed by the\n * given name and code.\n *\n * @param name {String} name\n * @param code {Number} code\n * @param err {Function} err\n * @api private\n */\n\nfunction cache(name, code, err) {\n    names[name] = err;\n    codes[code] = err;\n};\n\n/*!\n * next free error code\n */\n\nvar freeCode = 600;\n\n/**\n * Return the next free error code.\n *\n * @returns {Number}\n * @api private\n */\n\nfunction nextCode() {\n    while(codes[freeCode]) {\n        freeCode += 1;\n    }\n    return freeCode;\n};\n\n/**\n * Returns the error constructor by the given code or\n * name.\n *\n * Examples:\n *\n *  errors.find(404);\n *  // => Http404Error\n *\n *  errors.find(500);\n *  // => Http500Error\n *\n *  errors.find('Http401Error');\n *  // => http401Error\n *\n *\n * @param {String|Number} err\n * @returns {Function}\n * @api public\n */\n\nexports.find = function(err) {\n    return (typeof err == 'number') ? codes[err] : names[err];\n};\n\n/**\n * Determines if the given `Error` object was created using\n * the errors framework.\n *\n * @param {Object} err The error to check\n * @returns {Boolean}\n * @api private\n */\n\nvar isError = exports.isError = function isError(err) {\n    return err && err.hasOwnProperty('explanation') && err.hasOwnProperty('code');\n};\n\nvar _DEFAULT_ERROR_MAPPING = {\n\tstack: ['stack'],\n\tmessage: ['message'],\n\tname: ['constructor.name'],\n\tcode: ['code']\n};\n\n/**\n * Extracts error attributes into a formatted JSON\n * object. Useful for capturing 'errors like' properties\n * from a native error object (e.g. not an errors error).\n * \n * @param {Object} err The error to extract attrs from.\n * @param {Object} attrMap A mapping of source to dest\n * attributes where formatted dest property names are\n * the keys of the map and the src attribute names are\n * given as an array value. The src attribute (array)\n * can have multiple elements in which case each attr\n * is tried 1-by-1 until one is no null. These attrs\n * can also be in dotted notion which indicates nested\n * attributes (e.g. constructor.name).\n * @api public\n */\nexports.errorToJSON = function(err, attrMap) {\n\tvar attrs = attrMap || _DEFAULT_ERROR_MAPPING,\n\t\tformatted = {};\n\n\tfor (var dest in attrs) {\n\t\tfor (var attr_index in attrs[dest]) {\n\t\t\tvar val = err,\n\t\t\t\tsrc = attrs[dest][attr_index],\n\t\t\t\tsegs = src.split('.');\n\t\t\tfor (var seg_index in segs) {\n\t\t\t\tif (segs[seg_index] == 'stack' && !useStack) {\n\t\t\t\t\tval = null;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tval = segs[seg_index] in val ? val[segs[seg_index]] : null;\n\t\t\t}\n\t\t\tif (val != null) {\n\t\t\t\tformatted[dest] = val;\n\t\t\t}\n\t\t}\n\t}\n\treturn formatted;\n};\n\n/**\n * Create a new constructor instance based\n * on the given options.\n *\n * This factory method allows consumers to build\n * parameterized error constructor function instances\n * which can then be used to instantiate new concrete\n * instances of the given error.\n *\n * This method accepts jQuery style `options` argument\n * with the following properties (note that `name` is\n * the only required property, all others are optional).\n *\n * The `scope` option can be used to change the default\n * namespace to create the constructor in. If unspecified\n * it defaults to the `exports` object of this module\n * (i.e. `errors.exports`).\n *\n * The `parent` option specifies the parent to inherit\n * from. If unspecified it defaults to `Error`.\n *\n * The `defaultMessage`, `defaultExplanation` and\n * `defaultResponse` define the default text to use\n * for the new errors `message`, `explanation` and\n * `response` respectively. These values can be\n * overridden at construction time.\n *\n * The `code` specifies the error code for the new\n * error. If unspecified it defaults to a generated\n * error number which is greater than or equal to\n * 600.\n *\n * Examples:\n *\n *  // use all defaults\n *  errors.create({name: 'FileNotFoundError'});\n *  throw new errors.FileNotFoundError(\"Could not find file x\");\n *\n *  // inheritance\n *  errors.create({\n *      name: 'FatalError',\n *      code: 900\n *  });\n *  errors.create({\n *      name: 'DatabaseError',\n *      parent: errors.FatalError\n *      code: 901\n *  });\n *  var dbe = new errors.DatabaseError(\"Internal database error\");\n *  dbe instanceof errors.FatalError;\n *  // => true\n *\n *  // scoping to current module exports\n *  var MalformedEncodingError = errors.create({\n *      name: 'MalformedEncodingError',\n *      scope: exports\n *  });\n *  throw new MalformedEncodingError(\"Encoding not supported\");\n *\n *  // default message\n *  errors.create({\n *      name: 'SocketReadError',\n *      code: 4000,\n *      defaultMessage: 'Could not read from socket'\n *  });\n *  var sre = new errors.SocketReadError();\n *  sre.message;\n *  // => 'Could not read from socket'\n *  sre.code;\n *  // => 4000\n *  sre instanceof Error;\n *  // => true\n *\n *  // explanation and response\n *  errors.create({\n *      name: 'SocketReadError',\n *      code: 4000,\n *      defaultMessage: 'Could not read from socket',\n *      defaultExplanation: 'Unable to obtain a reference to the socket',\n *      defaultResponse: 'Specify a different port or socket and retry the operation'\n *  });\n *  var sre = new errors.SocketReadError();\n *  sre.explanation;\n *  // => 'Unable to obtain a reference to the socket'\n *  sre.response;\n *  // => 'Specify a different port or socket and retry the operation'\n *\n * @param {String} name The constructor name.\n * @param {Object} scope The scope (i.e. namespace).\n * @param {Function} parent The parent to inherit from.\n * @param {String} defaultMessage The default message.\n * @param {Number} code The error code.\n * @param {Number} status The status code.\n * @param {String} defaultExplanation The default explanation.\n * @param {String} defaultResponse The default operator response.\n * @return {Function} the newly created constructor\n * @api public\n */\n\nvar create = exports.create = function(options) {\n    var options = options || {}\n        , scope = options.scope || exports\n        , parent = options.parent || Error\n        , defaultMessage = options.defaultMessage\n            || 'An unexpected ' + options.name + ' occurred.'\n        , className = options.name\n        , errorCode = options.code || nextCode()\n        , statusCode = options.status\n        , defaultExplanation = options.defaultExplanation\n        , defaultResponse = options.defaultResponse\n        , formattedStack\n        , stack = {};\n\n\n/**\n * Create a new instance of the exception which accepts\n * 2 forms of parameters.\n *\n * (a) Passing the message, explanation and response\n * as individual argument strings:\n * Create a new instance of the exception optionally\n * specifying a message, explanation and response\n * for the new instance. If any of the arguments are\n * null, their value will default to their respective\n * default value use on the `create` call, or will\n * be null if no default was specified.\n *\n * (b) Passing an options style object which contains\n * key / value pairs. In this form keys map to the\n * attributes of the error object. Note that the properties\n * 'stack', 'name' and 'code' cannot be set via the options\n * style object in this form.\n *\n * @param {String|Object} msg The message to use for the error.\n * @param {String} expl The explanation to use for the error.\n * @param {String} fix The response to use for the error.\n * @return {Object} The newly created error.\n */\n\n    scope[className] = function(msg, expl, fix) {\n    \tvar attrs = {};\n    \tif (typeof msg !== null && typeof msg === 'object') {\n    \t\tattrs = msg;\n    \t\tmsg = attrs['message'] || defaultMessage;\n    \t\tif (attrs.hasOwnProperty('stack')\n    \t\t\t\t|| attrs.hasOwnProperty('name')\n    \t\t\t\t|| attrs.hasOwnProperty('code')) {\n    \t\t\tthrow Error(\"Properties 'stack', 'name' or 'code' \" +\n    \t\t\t\t\t\"cannot be overridden\");\n    \t\t}\n    \t}\n    \tattrs['status'] = attrs['status'] || statusCode;\n        msg = msg || defaultMessage;\n        expl = expl || defaultExplanation;\n        fix = fix || defaultResponse;\n\n        parent.call(this, msg);\n\n        // hack around the defineProperty for stack so\n        // we can delay stack formatting until access\n        // for performance reasons\n        Error.captureStackTrace(stack, scope[className]);\n\n/**\n * Return the stack tracks for the error.\n *\n * @return {String}\n * @api public\n */\n        Object.defineProperty(this, 'stack', {\n            configurable: true,\n            enumerable: false,\n            get: function() {\n                if (!formattedStack) {\n                    formattedStack = stack.stack.replace('[object Object]', 'Error: ' + this.message);\n                }\n                return formattedStack;\n            }\n        });\n\n/**\n * Return the explanation for this error.\n *\n * @return {String}\n * @api public\n*/\n\n        Object.defineProperty(this, 'explanation', {\n            value: attrs['explanation'] || expl,\n            configurable: true,\n            enumerable: true\n        });\n\n/**\n * Return the operator response for this error.\n *\n * @return {String}\n * @api public\n */\n\n        Object.defineProperty(this, 'response', {\n            value: attrs['response'] || fix,\n            configurable: true,\n            enumerable: true\n        });\n\n/**\n * Return the error code.\n *\n * @return {Number}\n * @api public\n */\n\n        Object.defineProperty(this, 'code', {\n            value: attrs['code'] || errorCode,\n            configurable: true,\n            enumerable: true\n        });\n\n/**\n * HTTP status code of this error.\n *\n * If the instance's `code` is not a valid\n * HTTP status code it's normalized to 500.s\n *\n * @return {Number}\n * @api public\n */\n\n        Object.defineProperty(this, 'status', {\n            value: attrs['status'] || (http.STATUS_CODES[errorCode] ? errorCode : 500),\n            configurable: true,\n            // normalize for http status code and connect compat\n            enumerable: true\n        });\n\n/**\n * Name of this error.\n *\n * @return {String}\n * @api public\n */\n\n        Object.defineProperty(this, 'name', {\n            value: className,\n            configurable: true,\n            enumerable: true\n        });\n\n/**\n * Message for this error.\n *\n * @return {String}\n * @api public\n */\n\n        Object.defineProperty(this, 'message', {\n            value: attrs['message'] || msg,\n            configurable: true,\n            enumerable: true\n        });\n\n        // expose extra conf attrs as properties\n        for (var key in attrs) {\n    \t\tif (!this.hasOwnProperty(key)) {\n    \t\t\tObject.defineProperty(this, key, {\n    \t            value: attrs[key],\n    \t            configurable: true,\n    \t            enumerable: true\n    \t        });\n    \t\t}\n    \t}\n\n    };\n\n    util.inherits(scope[className], parent);\n\n/**\n * Return the name of the prototype.\n *\n * @return {String}\n * @api public\n */\n\n    Object.defineProperty(scope[className].prototype, 'name', {\n        value: className,\n        enumerable: true\n    });\n\n/**\n * Return a formatted string for this error which\n * includes the error's `name`, `message` and `code`.\n * The string will also include the `explanation` and\n * `response` if they are set for this instance.\n *\n * Can be redefined by consumers to change formatting.\n *\n * @return {String}\n * @api public\n */\n\n    scope[className].prototype.toString = function() {\n\n        /*!\n\n        The snippet below would allow us to provide connect errorHandler()\n        middleware compatible errors, but is too costly. In a 1000 executions\n        of toString() it adds ~25% overhead.\n\n        var e = Error();\n        Error.captureStackTrace(e);\n        if (~e.stack.indexOf(\"connect/lib/middleware/errorHandler.js\")) {\n            return this.message;\n        }\n        */\n\n        // TODO externalization\n        var msg = util.format(\"%s: %s\\nCode: %s\", this.name, this.message, this.code);\n        if (this.explanation) {\n            msg += \"\\nExplanation: \" + this.explanation;\n        }\n        if (this.response) {\n            msg += \"\\nResponse: \" + this.response;\n        }\n\n        function isExtra(key) {\n        \treturn ['name', 'message', 'status', 'code',\n        \t        'response', 'explanation', 'stack'].indexOf(key) < 0;\n        }\n\n        // extra properties\n        Object.keys(this).filter(isExtra).forEach(function(key) {\n        \tmsg += util.format(\"\\n%s: %s\", key, this[key]);\n        }, this);\n\n        if (useStack) {\n            msg += \"\\n\" + this.stack;\n        }\n        return msg;\n    };\n\n/**\n * Return the JSON representation of this error\n * which includes it's `name`, `code`, `message`\n * and `status`. The JSON object returned will\n * also include the `explanation` and `response`\n * if defined for this instance.\n *\n * This method can be redefined for customized\n * behavior of `JSON.stringify()`.\n *\n * @return {Object}\n * @api public\n */\n\n    scope[className].prototype.toJSON = function() {\n        // TODO externalization\n        return useStack\n                ? mixin(this, {stack: this.stack}, true)\n                : mixin(this, {}, true);\n    };\n\n    cache(className, errorCode, scope[className]);\n\n    return scope[className];\n};\n\n/*!\n * Module global to track if we should use stack traces.\n */\n\nvar useStack = false;\n\n/**\n * Get/set the module default behavior in terms of if\n * stack traces should be included in `toString()`,\n * `send()`ing errors, etc.\n *\n * When called with no parameters this method will return\n * if the errors module is set to use stacks or not.\n *\n * When called with a single boolean parameter this\n * method will interally set if stack traces should be used.\n *\n * @param {Boolean} useStacks\n * @api public\n */\n\nexports.stacks = function(useStacks) {\n    if (useStacks == null || useStacks == undefined) {\n        return useStack;\n    }\n    useStack = useStacks;\n};\n\n/*!\n * Default page title for HTML responses.\n */\n\nvar pageTitle = 'Error';\n\n/**\n * Gets/sets the module's default page title to use for\n * html based responses.\n *\n * If called with no arguments, returns the current title\n * set. Otherwise when called with a single `String` argument\n * sets the title to use for html based responses.\n *\n * The default title is 'Error'.\n *\n * @param {String} title The title to use.\n * @api public\n */\n\nexports.title = function(title) {\n    if (title == null || title == undefined) {\n        return pageTitle;\n    }\n    pageTitle = title;\n};\n\n/**\n * Perform a top level mixing between and source\n * and destination object optionally skipping\n * undefined/null properties.\n *\n * Examples:\n *\n *  mixin({a: 'A'}, {b: 'B});\n *  // => {a: 'A', b: 'B'}\n *\n *  mixin({'a': null}, {b: 'B}, true);\n *  // => {b: 'B'}\n *\n * @param {Object} src\n * @param {Object} dest\n * @param {Boolean} skipEmpty\n * @returns {Object}\n * @api private\n */\n\nfunction mixin(src, dest, skipEmpty) {\n    // TODO: refactor into common module\n    dest = dest || {}, src = src || {};\n    Object.keys(src).forEach(function(key) {\n        if (!dest[key] && (skipEmpty && src[key] != null && src[key] != undefined)) {\n            dest[key] = src[key];\n        }\n    });\n    return dest;\n};\n\n/**\n * Base `Error` for web app HTTP based\n * exceptions -- all 4xx and 5xx wrappered\n * errors are instances of `HttpError`.\n */\n\ncreate({name: 'HttpError'});\n\n/**\n * `HttpError`s for all 4xx-5xx HTTP based status codes\n * defined as `Http[code]Error` for convenience.\n *\n * Examples:\n *\n *  // Accept: text/html\n *  res.send(new errors.Http404Error('Resource not found'));\n *  // => text/html\n *  // => \"Resource not found\"\n *\n *  // Accept: application/json\n *  res.send(new errors.Http423Error('Resource is currently locked'));\n *  // => application/json\n *  // {\n *  //      \"name\": \"Http423Error\",\n *  //      \"code\": 423,\n *  //      \"status\": 423,\n *  //      \"message\": \"Resource is currently locked\"\n *  // }\n *\n *  // Accept: text/plain\n *  // res.send(new errors.Http401Error('You do not have access'));\n *  // => text/plain\n *  // \"You do not have access\"\n */\n\nfor (var code in http.STATUS_CODES) {\n    // TODO: provide default explanation & response\n    if (http.STATUS_CODES.hasOwnProperty(code) && code >= 400) {\n        create({\n            name: 'Http' + code + 'Error',\n            code: code,\n            parent: exports.HttpError,\n            defaultMessage: http.STATUS_CODES[code]\n        });\n    }\n}\n\n/*!\n * express response prototype\n */\n\nvar response;\n\n/*!\n * determine if express is available\n */\n\ntry {\n    response = require('express').response;\n} catch (e) {\n    // express not installed\n}\n\n/*!\n * express or connect errorHanlder middleware\n */\n\nvar errHandler;\n\n/*!\n * Determine if express or connect errorHanlder middleware\n * are installed\n */\n\ntry {\n    // check for express\n    errHandler = require('express').errorHandler;\n} catch (e) {\n    try {\n        // check for connect\n        errHandler = require('connect').errorHandler;\n    } catch (x) {\n        // not installed\n    }\n}\n\nif (errHandler) {\n\n/**\n * Custom error handler middleware based on connect's\n * `errorHandler()` middleware. Althought out of the box\n * connect or express errorHandler() works just fine,\n * its not as pretty as you might like due to the additional\n * details in custom error's `toString()`.\n *\n * Therefore `errors` exports its own `errorHandler()`\n * middleware which supports an `options` object to configure\n * it.\n *\n * The `options` JSON object accepts the following properties:\n *\n * @param {String} title The title to use for html based responses which overrides module `title()`.\n * @param {Boolean} connectCompat True to create connect compat html responses.\n * @param {Boolean} includeStack True if the custom error handler should include the stack.\n * @api public\n */\n\n    exports.errorHandler = function(options) {\n        var opts = mixin({connectCompat: false, title: pageTitle, includeStack: useStack}\n                , options, true);\n        if (opts.connectCompat) {\n            return function(err, req, res, next) {\n                if (isError(err)) {\n                    // connect errorHandler() compat\n                    err.toString = function() {\n                        return err.message;\n                    };\n                }\n                errHandler.title = opts.title;\n                // connect middleware error handler\n                return errHandler()(err, req, res, next);\n            };\n        } else {\n            return defaultFormatter(opts.title, opts.includeStack);\n        }\n    };\n}\n\n\n/**\n * If Express is installed, patch `response` to\n * permit `send`ing `Error` based objects. If\n * vanilla `Error` objects are used with `send`,\n * they are mapped by default to the `Http500Error`.\n *\n * Prior to `send`ing an error based response, any\n * mapper setup for the `Error` is invoked allowing\n * customization or transformation of the error.\n *\n * The current implementation provides direct support\n * for `text/html`, `text/plain` and `application/json`\n * based accept types, otherwise it defaults to `plain/text`.\n *\n * Examples:\n *\n *  // Accept: text/html\n *  res.send(new errors.Http404Error('Resource not found'));\n *  // => html\n *  // => html structured response\n *\n *  // Accept: application/json\n *  res.send(new errors.Http423Error('Resource is currently locked'));\n *  // => application/json\n *  // => {\n *  // =>   'name': 'Http423Error',\n *  // =>   'code': 423,\n *  // =>   'status': 423,\n *  // =>   'message': 'Resource is currently locked'\n *  // => }\n *\n *  // Accept: text/plain\n *  // res.send(new errors.Http401Error('You do not have access'));\n *  // => text/plain\n *  // => \"You do not have access\"\n *\n *  // Accept: text/xml\n *  // res.send(new errors.Http500Error('Something bad happened'));\n *  // => 500\n *  // => text/plain\n */\n\nif (response) {\n    var _send = response.send;\n    response.send = function(err) {\n        if (arguments.length == 1 && err instanceof Error) {\n            err = mapError(err);\n            if (!isError(err)) {\n                // map vanilla errors into 500s\n                err = new exports.Http500Error(err.message ||\n                        http.STATUS_CODES[500] + ' - ' + err.name);\n            }\n            defaultFormatter(pageTitle, useStack)(err, this.req, this.req.res, null);\n            return this;\n        }\n        return _send.apply(this, arguments);\n    };\n}\n\n/*!\n * buffers for the error css and html\n */\n\nvar errorCss, errorHtml;\n\n/*!\n * preload and buffer error css and html\n */\n\nerrorCss = fs.readFileSync(__dirname + '/static/error.css', 'utf8');\nerrorHtml = fs.readFileSync(__dirname + '/static/error.html', 'utf8');\n\n/**\n * Returns the default formatter which handles\n * responses for the middleware and `send()` method.\n * This code is based on `connect`'s `errorHandler`.\n *\n * @param {String} title The title to use for html response.\n * @param {Boolean} includeStack If we should include the stack trace.\n * @returns {Function} The default formatter function.\n * @api private\n */\n\nfunction defaultFormatter(title, includeStack) {\n\n    return function(err, req, res, next) {\n        if ('test' != env) {\n            console.log(err);\n        }\n\n        function toHtml(elem, tag) {\n            return elem ? util.format(\"<%s>%s</%s>\", tag, elem, tag) : \"\";\n        }\n\n        function buildStack() {\n            var stack = (err.stack || '').split('\\n').slice(1).map(function(trace) {\n                return '<li>' + trace + '</li>';\n            }).join('');\n            return stack;\n        }\n\n        res.statusCode = err.status;\n\n        var accept = req.headers.accept || ''\n            , html;\n        if (~accept.indexOf('html')) {\n\n            html = errorHtml\n              .replace('{style}', errorCss)\n              .replace('{stack}', includeStack ? buildStack() : \"\")\n              .replace('{title}', title || 'Error')\n              .replace('{statusCode}', err.status)\n              .replace('{explanation}', toHtml(err.explanation, 'h4'))\n              .replace('{response}', toHtml(err.response, 'h4'))\n              .replace(/\\{error\\}/g, err.message);\n\n            res.setHeader('Content-Type', 'text/html; charset=utf-8');\n            res.end(html);\n        } else if (~accept.indexOf('json')) {\n            res.setHeader('Content-Type', 'application/json');\n            var json = {error: err.toJSON()};\n            if (includeStack) {\n                json['error']['stack'] = err.stack;\n            }\n            res.end(JSON.stringify(json));\n        } else {\n            res.writeHead(res.statusCode, { 'Content-Type': 'text/plain' });\n            res.end(err.toString() + (includeStack ? \"\\n\" + err.stack : \"\"));\n        }\n    };\n};\n\n\n/**\n * Returns the argument as an `Array`. If\n * the argument is already an `Array`, it's\n * returned unchanged. Otherwise the given\n * argument is returned in a new `Array`.\n *\n * Examples:\n *\n *  asArray('a');\n *  // => ['a']\n *\n *  asArray(null);\n *  // => []\n *\n *  asArray(['a', 'b']);\n *  // => ['a', 'b']\n *\n * @param {Object|Array} obj The object to wrap in an array.\n * @returns {Array}\n * @api private\n */\n\nfunction asArray(obj) {\n    // TODO: refator into common module\n    return obj instanceof Array ? obj : [obj];\n};\n\n/*!\n * cache of error mapper functions indexed by error name\n */\n\nvar mappers = {};\n\n/**\n * Adds or retrieves an error mappers.\n *\n * When called with 2 arguments, this method is used to\n * add error mappers for the given error names.\n *\n * When called with a single argument it's used to\n * retrieve the registered mapper for the given\n * error name.\n *\n * Any bound mappers will be invoked\n * for `express.send()` integration and hence you\n * can define mappers used when sending error responses\n * with Express.\n *\n * Examples:\n *\n *  // adding mappers\n *  errors.mapper('RangeError', function(rangeError) {\n *      return new errors.Http412Error('Invalid range requested');\n *  })\n *  .addmapper('ReferenceError', function(refError) {\n *      return new errors.Http424Error('Bad reference given');\n *  });\n *\n *  errors.mapper(['RangeError', 'ReferenceError'], function(err) {\n *      return new errors.Http500Error(err.message);\n *  });\n *\n *  // retrieve error mapper\n *  var rangeError = errors.mapper('RangeError');\n *\n * @param {String|Array} errName The error name(s) to attach the mapper to.\n * @param {Function} fn The function to call for the mapping.\n * @returns {Object} The exports of errors for chaining or the\n * retrieved error.\n * @api public\n */\n\nvar mapper = exports.mapper = function(errName, fn) {\n    if (arguments.length == 2) {\n        asArray(errName).forEach(function(name) {\n            mappers[name] = fn;\n        });\n        return exports;\n    }\n    return mappers[errName];\n};\n\n/**\n * Maps the given error using the bound error mapper\n * and returns the mapped error as per the mappers\n * return value. If no mapper is bound to the given\n * errors name, the argument error is returned unchanged.\n *\n * Examples:\n *\n *  errors.mapError(new RangeError());\n *\n * @param {Object} err The error instance to map.\n * @returns {Object} The mapped error.\n * @api public\n */\n\nvar mapError = exports.mapError = function(err) {\n    return mapper(err.name) ? mapper(err.name)(err) : err;\n};\n\n"}